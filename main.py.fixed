"""
竞赛智能客服系统 - 主程序入口
提供API服务，集成MCP+RAG引擎
"""

from fastapi import FastAPI, HTTPException, Request, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from starlette.middleware.cors import CORSMiddleware
import logging
import json
import re
import time
import os
from typing import Dict, List, Any, Optional
from urllib.parse import unquote

from pydantic import BaseModel

from app.config import settings
from app.models.MCPWithRAG import MCPWithRAG

# 配置日志
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# 创建FastAPI应用
app = FastAPI(title="竞赛智能客服系统")

# 配置CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 配置静态文件
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# 配置模板
templates = Jinja2Templates(directory="app/templates")

# 请求模型
class QuestionRequest(BaseModel):
    question: str
    session_id: Optional[str] = None

# 响应模型
class AnswerResponse(BaseModel):
    answer: str
    sources: List[Dict[str, Any]] = []
    competition_type: Optional[str] = None
    confidence: float = 0.0
    processing_time: Optional[float] = None

# 初始化引擎
try:
    # 使用新的MCPWithRAG引擎（首次运行时重建索引）
    qa_engine = MCPWithRAG(rebuild_index=True)
    logger.info("MCPWithRAG引擎初始化成功")
except Exception as e:
    logger.error(f"引擎初始化失败: {str(e)}")
    qa_engine = None

# 主页
@app.get("/", response_class=HTMLResponse)
async def get_home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# 问答API
@app.post("/api/ask", response_model=AnswerResponse)
async def ask_question(request: QuestionRequest):
    if qa_engine is None:
        raise HTTPException(status_code=500, detail="服务未准备好，引擎初始化失败")
    
    question = request.question.strip()
    session_id = request.session_id
    
    if not question:
        raise HTTPException(status_code=400, detail="问题不能为空")
    
    logger.info(f"收到问题: {question}, session_id: {session_id}")
    
    start_time = time.time()
    try:
        # 调用新的MCPWithRAG引擎
        result = await qa_engine.query(question=question, session_id=session_id)
        
        processing_time = time.time() - start_time
        result["processing_time"] = processing_time
        
        logger.info(f"问题回答完成, 耗时: {processing_time:.2f}秒")
        return result
    
    except Exception as e:
        logger.error(f"处理问题时出错: {str(e)}")
        raise HTTPException(status_code=500, detail=f"处理问题时出错: {str(e)}")

# WebSocket支持
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    
    try:
        while True:
            # 接收消息
            data = await websocket.receive_text()
            try:
                request_data = json.loads(data)
                question = request_data.get("question", "").strip()
                session_id = request_data.get("session_id")
                
                if not question:
                    await websocket.send_json({"error": "问题不能为空"})
                    continue
                
                logger.info(f"WS收到问题: {question}, session_id: {session_id}")
                
                # 发送处理中的状态
                await websocket.send_json({"status": "processing"})
                
                # 调用新的MCPWithRAG引擎
                result = await qa_engine.query(question=question, session_id=session_id)
                
                # 发送结果
                await websocket.send_json(result)
            
            except json.JSONDecodeError:
                await websocket.send_json({"error": "无效的JSON格式"})
            except Exception as e:
                logger.error(f"WS处理消息时出错: {str(e)}")
                await websocket.send_json({"error": f"处理问题时出错: {str(e)}"})
    
    except WebSocketDisconnect:
        logger.info("WebSocket连接已关闭")

# 重建索引API
@app.post("/api/rebuild_index")
async def rebuild_index():
    if qa_engine is None:
        raise HTTPException(status_code=500, detail="服务未准备好，引擎初始化失败")
    
    try:
        start_time = time.time()
        success = qa_engine.rag_engine.rebuild_index()
        processing_time = time.time() - start_time
        
        if success:
            logger.info(f"索引重建成功, 耗时: {processing_time:.2f}秒")
            return {"status": "success", "message": f"索引重建成功, 耗时: {processing_time:.2f}秒"}
        else:
            logger.error("索引重建失败")
            return {"status": "error", "message": "索引重建失败"}
    
    except Exception as e:
        logger.error(f"重建索引时出错: {str(e)}")
        raise HTTPException(status_code=500, detail=f"重建索引时出错: {str(e)}")

# 健康检查
@app.get("/health")
async def health_check():
    if qa_engine is None:
        return {"status": "error", "message": "引擎初始化失败"}
    
    return {"status": "ok", "message": "服务正常运行"}

# 示例问题API
@app.get("/api/example_questions")
async def get_example_questions():
    """提供示例问题列表"""
    example_questions = [
        "泰迪杯数据挖掘挑战赛是什么比赛？",
        "3D编程模型创新设计专项赛的参赛要求是什么？",
        "机器人工程设计专项赛需要提交哪些材料？",
        "太空电梯工程设计专项赛的评分标准是什么？",
        "虚拟仿真平台创新设计专项赛的参赛对象有哪些？",
        "开源鸿蒙机器人专项赛的比赛流程是怎样的？",
        "比赛报名截止日期是什么时候？",
        "如何提交参赛作品？"
    ]
    return {"examples": example_questions}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host=settings.API_HOST,
        port=53085,  # 固定端口为53085
        reload=settings.DEBUG
    ) 